<?php

/**
 * @file
 * Provides integrations with Facebook Canvas Applications.
 */


/**
 * Implements hook_theme().
 */
function fbcanvas_theme() {
  return array(
    'fbcanvas_fb_root' => array(
      'variables' => array('app' => NULL),
      'template' => 'fbcanvas-fb-root',
    ),
  );
}

/**
 * Implements hook_init().
 */
function fbcanvas_init() {
  // Allow Cookies to be set in Internet Explorer through iFrames.
  header('p3p: CP="NOI ADM DEV PSAi COM NAV OUR OTR STP IND DEM"');

  // Require authorization to use application in canvas mode.
  fbcanvas_authorize();

  // Add canvas javascript to alter links.
  drupal_add_js(drupal_get_path('module', 'fbcanvas') . '/fbcanvas.js');

  // Debugging
  //dpm($_REQUEST, 'request');
  //dpm($_COOKIE, 'cookie');
  //dpm($_POST, 'post');
}

/**
 * Implements hook_page_alter().
 */
function fbcanvas_page_alter(&$page) {
  // Insert required markup and js code.
  $page['page_bottom']['fbcanvas'] = array(
    '#type' => 'markup',
    '#markup' => theme('fbcanvas_fb_root', array('app' => fbcanvas_app())),
  );
}

/**
 * Implements hook_form_alter().
 */
function fbcanvas_form_alter(&$form, &$form_state, $form_id) {
  global $base_path;

  $app = fbcanvas_app();

  // If submitting the form in "canvas" mode, modify some form settings.
  if ( $app->is_canvas ) {

    // When submitting a form in canvas mode, add fbcanvas as a hidden field.
    // This will be used to for the site into "canvas" mode after submitting.
    $form['fbcanvas'] = array(
      '#type' => 'hidden',
      '#value' => 1,
    );

    // Rewrite action url to be absolute.
    $action = str_replace($base_path, '', $form['#action']);
    $form['#action'] = url($action, array('absolute' => TRUE, 'fbcanvas' => FALSE));
  }
}

/**
 * Implements hook_drupal_goto_alter().
 */
function fbcanvas_drupal_goto_alter($path, $options, $http_response_code) {
  $app = fbcanvas_app();

  // If redirecting in "canvas" mode, we need to redirect using js.
  if ( $app->is_canvas ) {
    echo "<script type=\"text/javascript\">\ntop.location.href = \"" . fbcanvas_url($path) . "\";\n</script>";
    exit;
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function fbcanvas_url_outbound_alter(&$path, &$options, $original_path) {
  $app = fbcanvas_app();

  // Do not modify external urls.
  if ( isset($options['external']) && $options['external'] ) {
    return;
  }

  // If in canvas mode, rewrite all relative urls to canvas url.
  if ( $app->is_canvas ) {
    if ( !isset($options['fbcanvas']) || $options['fbcanvas'] ) {
      $options['fbcanvas'] = TRUE;
      $options['absolute'] = TRUE;
      $options['base_url'] = $app->protocol . '://apps.facebook.com/' . $app->namespace;
    }
  }
}

/**
 * Redirect to Authorize
 */
function fbcanvas_authorize($redirect_uri = NULL) {
  $app = fbcanvas_app();

  // Default redirect to home page.
  if ( is_null($redirect_uri) ) {
    $redirect_uri = fbcanvas_url();
  }

  // Application hasn't been authorized, redirect to authorization page.
  if ( $app->request && empty($app->request['user_id']) ) {
    $auth_url  = 'http://www.facebook.com/dialog/oauth?client_id=';
    $auth_url .= $app->id . '&amp;';
    $auth_url .= 'redirect_uri=' . urlencode($redirect_uri);

    // Redirect to authorization url.
    drupal_add_js("top.location.href = '" . $auth_url . "'", 'inline');
  }
}

/**
 * Return Facebook Canvas URL.
 */
function fbcanvas_url($path = NULL, array $options = array()) {
  global $base_url;

  $app = fbcanvas_app();

  // Remove front / from path.
  $path = ltrim($path, '/');

  // Get the absolute url of path.
  $absolute_url = url($path, array('absolute' => TRUE));

  // Build Facebook Canvas URL.
  $fbcanvas_url = $app->protocol . '://apps.facebook.com/' . $app->namespace;

  // Replace base_url with fbcanvas_url.
  return str_replace($base_url, $fbcanvas_url, $absolute_url);
}

/**
 * Returns Facebook Application Object.
 */
function fbcanvas_app() {
  $app = &drupal_static(__FUNCTION__);

  if ( !isset($app) ) {

    // Default application settings.
    $app = (object) array(
      'id' => variable_get('fbcanvas_app_id', ''),
      'secret' => variable_get('fbcanvas_app_secret', ''),
      'namespace' => variable_get('fbcanvas_app_namespace', ''),
      'protocol' => variable_get('fbcanvas_app_protocol', 'http'),
    );

    // Find signed_request data from $_REQUEST.
    if ( isset($_REQUEST['signed_request']) ) {
      list($encoded_sig, $payload) = explode('.', $_REQUEST['signed_request'], 2);
      $app->request = json_decode(base64_decode(strtr($payload, '-_', '+/')), true);

      // Update cookie to reflect the latest signed request.
      setcookie('fbsr_'. $app->id, $_REQUEST['signed_request']);
    }
    // Find signed_request data from $_COOKIE and check for $_POST['fbcanvas'] = 1, used for form submissions.
    elseif ( isset($_COOKIE['fbsr_'. $app->id]) && isset($_POST['fbcanvas']) && $_POST['fbcanvas'] == 1 ) {
      list($encoded_sig, $payload) = explode('.', $_COOKIE['fbsr_'. $app->id], 2);
      $app->request = json_decode(base64_decode(strtr($payload, '-_', '+/')), true);
    }
    // Standard mode, no canvas.
    else {
      $app->request = FALSE;
    }

    // Determine if in canvas mode.
    $app->is_canvas = (bool) $app->request;
  }

  return $app;
}
