<?php

/**
 * @file
 * Provides integrations with Facebook Canvas Applications.
 */

/**
 * Implements hook_theme().
 */
function fbcanvas_theme() {
  return array(
    'fbcanvas_fb_root' => array(
      'variables' => array('app' => NULL),
      'template' => 'fbcanvas-fb-root',
    ),
  );
}

/**
 * Implements hook_init().
 */
function fbcanvas_init() {
  // Allow Cookies to be set in Internet Explorer through iFrames.
  header('p3p: CP="NOI ADM DEV PSAi COM NAV OUR OTR STP IND DEM"');

  // Require authorization to use application in canvas mode.
  fbcanvas_authorize();

  // Add canvas javascript to alter links.
  drupal_add_js(drupal_get_path('module', 'fbcanvas') . '/fbcanvas.js');

  // Debugging
  //dpm($_REQUEST, 'request');
  //dpm($_COOKIE, 'cookie');
  //dpm($_POST, 'post');
  //dpm($GLOBALS['conf']['fbcanvas_mode']);
}

/**
 * Implements hook_page_alter().
 */
function fbcanvas_page_alter(&$page) {
  // Insert required markup and js code.
  $page['page_bottom']['fbcanvas'] = array(
    '#type' => 'markup',
    '#markup' => theme('fbcanvas_fb_root', array('app' => fbcanvas_app())),
  );
}

/**
 * Implements hook_form_alter().
 */
function fbcanvas_form_alter(&$form, &$form_state, $form_id) {
  global $base_path;

  $app = fbcanvas_app();

  // If submitting the form in "canvas" mode, modify some form settings.
  if ( $app->is_canvas ) {

    // When submitting a form in canvas mode, add fbcanvas as a hidden field.
    // This will be used to for the site into "canvas" mode after submitting.
    $form['fbcanvas'] = array(
      '#type' => 'hidden',
      '#value' => 1,
    );

    // Rewrite action url to be absolute.
    $action = str_replace($base_path, '', $form['#action']);
    $form['#action'] = url($action, array('absolute' => TRUE, 'fbcanvas' => FALSE));
  }
}

/**
 * Implements hook_drupal_goto_alter().
 */
function fbcanvas_drupal_goto_alter($path, $options, $http_response_code) {
  $app = fbcanvas_app();

  // If redirecting in "canvas" mode, we need to redirect using js.
  if ( $app->is_canvas ) {
    echo "<script type=\"text/javascript\">\ntop.location.href = \"" . fbcanvas_url($path) . "\";\n</script>";
    exit;
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function fbcanvas_url_outbound_alter(&$path, &$options, $original_path) {
  $app = fbcanvas_app();

  // Do not modify external urls.
  if ( isset($options['external']) && $options['external'] ) {
    return;
  }

  // If in canvas mode, rewrite all relative urls to canvas url.
  if ( $app->is_canvas ) {
    if ( !isset($options['fbcanvas']) || $options['fbcanvas'] ) {
      $options['fbcanvas'] = TRUE;
      $options['absolute'] = TRUE;
      $options['base_url'] = $app->protocol . '://apps.facebook.com/' . $app->namespace;
    }
  }
}

/**
 * Implements hook_language_negotiation_info().
 */
function fbcanvas_language_negotiation_info() {
  return array(
    'fbcanvas_language_facebook' => array(
      'callbacks' => array('language' => 'fbcanvas_language_from_facebook'),
      'file' => drupal_get_path('module', 'fbcanvas') . '/fbcanvas.module',
      'weight' => 10,
      'name' => t('Facebook Locale'),
      'description' => t('Determine the language from a Facebook Signed Request.'),
    ),
  );
}

/**
 * Identify language from a Facebook Signed Request.
 *
 * @param $languages
 *   An array of valid language objects.
 * @return
 *   A valid language code on success, FALSE otherwise.
 */
function fbcanvas_language_from_facebook($languages) {
  $app = fbcanvas_app();

  if ( $app->is_canvas && isset($app->request['user']['locale']) ) {
    return fbcanvas_lang_map($app->request['user']['locale']);
  }

  return FALSE;
}

/**
 * Redirect to Authorize
 */
function fbcanvas_authorize($redirect_uri = NULL) {
  $app = fbcanvas_app();

  // Default redirect to home page.
  if ( is_null($redirect_uri) ) {
    $redirect_uri = fbcanvas_url();
  }

  // Application hasn't been authorized, redirect to authorization page.
  if ( $app->request && empty($app->request['user_id']) ) {
    $auth_url  = 'http://www.facebook.com/dialog/oauth?client_id=';
    $auth_url .= $app->id . '&amp;';
    $auth_url .= 'redirect_uri=' . urlencode($redirect_uri);

    // Redirect to authorization url.
    drupal_add_js("top.location.href = '" . $auth_url . "'", 'inline');
  }
}

/**
 * Return Facebook Canvas URL.
 */
function fbcanvas_url($path = NULL, array $options = array()) {
  global $base_url;

  $app = fbcanvas_app();

  // Remove front / from path.
  $path = ltrim($path, '/');

  // Get the absolute url of path.
  $absolute_url = url($path, array('absolute' => TRUE));

  // Build Facebook Canvas URL.
  $fbcanvas_url = $app->protocol . '://apps.facebook.com/' . $app->namespace;

  // Replace base_url with fbcanvas_url.
  return str_replace($base_url, $fbcanvas_url, $absolute_url);
}

/**
 * Returns Facebook Application Object.
 */
function fbcanvas_app() {
  $app = &drupal_static(__FUNCTION__);

  if ( !isset($app) ) {

    // Default application settings.
    $app = (object) array(
      'id' => variable_get('fbcanvas_app_id', ''),
      'secret' => variable_get('fbcanvas_app_secret', ''),
      'namespace' => variable_get('fbcanvas_app_namespace', ''),
      'protocol' => variable_get('fbcanvas_app_protocol', 'http'),
    );

    // Find signed_request data from $_REQUEST.
    if ( isset($_REQUEST['signed_request']) ) {
      list($encoded_sig, $payload) = explode('.', $_REQUEST['signed_request'], 2);
      $app->request = json_decode(base64_decode(strtr($payload, '-_', '+/')), true);

      // Update cookie to reflect the latest signed request.
      setcookie('fbsr_'. $app->id, $_REQUEST['signed_request']);
    }
    // Find signed_request data from $_COOKIE and check for $_POST['fbcanvas'] = 1, used for form submissions.
    elseif ( isset($_COOKIE['fbsr_'. $app->id]) && isset($_POST['fbcanvas']) && $_POST['fbcanvas'] == 1 ) {
      list($encoded_sig, $payload) = explode('.', $_COOKIE['fbsr_'. $app->id], 2);
      $app->request = json_decode(base64_decode(strtr($payload, '-_', '+/')), true);
    }
    // Standard mode, no canvas.
    else {
      $app->request = FALSE;
    }

    // Determine if in canvas mode.
    $app->is_canvas = (bool) $app->request;
  }

  return $app;
}

/**
 * Set canvas.
 */
function fbcanvas_set_canvas($value) {
  $GLOBALS['conf']['fbcanvas_mode'] = $value;
}

/*
 * Mapping Facebook locale -> Drupal language code
 */
function fbcanvas_lang_map($lang) {
  $map = array(
    'af_ZA' => 'af',
    'ar_AR' => 'ar',
    'ay_BO' => 'ay',
    'az_AZ' => 'az',
    'be_BY' => 'be',
    'bg_BG' => 'bg',
    'bn_IN' => 'bn',
    'bs_BA' => 'bs',
    'ca_ES' => 'ca',
    'cs_CZ' => 'cs',
    'cy_GB' => 'cy',
    'da_DK' => 'da',
    'de_DE' => 'de',
    'el_GR' => 'el',
    'en_US' => 'en',
    'eo_EO' => 'eo',
    'es_ES' => 'es',
    'et_EE' => 'et',
    'eu_ES' => 'eu',
    'fa_IR' => 'fa',
    'fi_FI' => 'fi',
    'fo_FO' => 'fo',
    'fr_CA' => 'fr',
    'fr_FR' => 'fr',
    'ga_IE' => 'ga',
    'gl_ES' => 'gl',
    'gn_PY' => 'gn',
    'gu_IN' => 'gu',
    'he_IL' => 'he',
    'hi_IN' => 'hi',
    'hr_HR' => 'hr',
    'hu_HU' => 'hu',
    'hy_AM' => 'hy',
    'id_ID' => 'id',
    'is_IS' => 'is',
    'it_IT' => 'it',
    'ja_JP' => 'ja',
    'jv_ID' => 'jv',
    'ka_GE' => 'ka',
    'kk_KZ' => 'kk',
    'km_KH' => 'km',
    'kn_IN' => 'kn',
    'ko_KR' => 'ko',
    'ku_TR' => 'ku',
    'la_VA' => 'la',
    'lt_LT' => 'lt',
    'lv_LV' => 'lv',
    'mg_MG' => 'mg',
    'mk_MK' => 'mk',
    'ml_IN' => 'ml',
    'mn_MN' => 'mn',
    'mr_IN' => 'mr',
    'ms_MY' => 'ms',
    'mt_MT' => 'mt',
    'nb_NO' => 'nb',
    'ne_NP' => 'ne',
    'nl_BE' => 'nl',
    'nn_NO' => 'nn',
    'pa_IN' => 'pa',
    'pl_PL' => 'pl',
    'ps_AF' => 'ps',
    'qu_PE' => 'qu',
    'rm_CH' => 'rm',
    'ro_RO' => 'ro',
    'ru_RU' => 'ru',
    'sa_IN' => 'sa',
    'se_NO' => 'se',
    'sk_SK' => 'sk',
    'sl_SI' => 'sl',
    'so_SO' => 'so',
    'sq_AL' => 'sq',
    'sr_RS' => 'sr',
    'sv_SE' => 'sv',
    'sw_KE' => 'sw',
    'ta_IN' => 'ta',
    'te_IN' => 'te',
    'tg_TJ' => 'tg',
    'th_TH' => 'th',
    'tl_ST' => 'tl',
    'tr_TR' => 'tr',
    'tt_RU' => 'tt',
    'uk_UA' => 'uk',
    'ur_PK' => 'ur',
    'uz_UZ' => 'uz',
    'vi_VN' => 'vi',
    'xh_ZA' => 'xh',
    'yi_DE' => 'yi',
    'zh_CN' => 'zh-hans',
    'zh_TW' => 'zh-hant',
    'zu_ZA' => 'zu',
  );

  return isset($map[$lang]) ? $map[$lang] : 'en';
}

/**
 * Implements hook_purl_provider().
 */
function fbcanvas_purl_provider() {
  return array(
    'fbcanvas' => array(
      'name' => t('Facebook Canvas Viewmode'),
      'description' => t('Set the Facebook Canvas Viewmode.'),
      'callback' => 'fbcanvas_set_canvas',
    ),
  );
}

/**
 * Implements hook_purl_modifiers().
 */
function fbcanvas_purl_modifiers() {
  return array(
    'fbcanvas' => array(
      array('value' => 'canvas', 'id' => 1),
    ),
  );
}